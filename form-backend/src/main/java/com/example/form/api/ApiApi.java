/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.form.api;

import com.example.form.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.math.BigDecimal;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-24T08:41:30.396412425Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "", description = "新建规则", tags = {"rule"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RuleListItem.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/rule",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<RuleListItem> addRule();


    @Operation(summary = "", description = "获取当前的用户", tags = {"api"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CurrentUser.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/currentUser",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<CurrentUser> currentUser();


    @Operation(summary = "", description = "发送验证码", tags = {"login"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FakeCaptcha.class)))})
    @RequestMapping(value = "/api/login/captcha",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<FakeCaptcha> getFakeCaptcha(@Parameter(in = ParameterIn.QUERY, description = "手机号", schema = @Schema()) @Valid @RequestParam(value = "phone", required = false) String phone);


    @Operation(summary = "", description = "", tags = {"api"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NoticeIconList.class)))})
    @RequestMapping(value = "/api/notices",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<NoticeIconList> getNotices();


    @Operation(summary = "", description = "登录接口", tags = {"login"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResult.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/login/account",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<LoginResult> login(@Parameter(in = ParameterIn.DEFAULT, description = "登录系统", required = true, schema = @Schema()) @Valid @RequestBody LoginParams body);


    @Operation(summary = "", description = "登录接口", tags = {"login"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/login/outLogin",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> outLogin();


    @Operation(summary = "", description = "删除规则", tags = {"rule"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/rule",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Object> removeRule();


    @Operation(summary = "", description = "获取规则列表", tags = {"rule"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RuleList.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/rule",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<RuleList> rule(@Parameter(in = ParameterIn.QUERY, description = "当前的页码", schema = @Schema()) @Valid @RequestParam(value = "current", required = false) BigDecimal current, @Parameter(in = ParameterIn.QUERY, description = "页面的容量", schema = @Schema()) @Valid @RequestParam(value = "pageSize", required = false) BigDecimal pageSize);


    @Operation(summary = "", description = "新建规则", tags = {"rule"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RuleListItem.class))),

            @ApiResponse(responseCode = "401", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/rule",
            produces = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<RuleListItem> updateRule();

}

